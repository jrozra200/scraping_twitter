head(mtcars)
str(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tappy(mpg, cyl, mean))
?with
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
x <- tapply(mtcars$mpg, mtcars$cyl, mean)
x$8 - x$4
x[8] - x[4]
x
x["8"]
x["8"] - x["4"]
debug(ls)
ls
with(mtcars, tapply(mpg, cyl, mean))
x <- as.numeric(mean(iris$Sepal.Length))
x
tapply(mtcars$mpg, mtcars$cyl, mean)
x <- tapply(mtcars$mpg, mtcars$cyl, mean)
x["4"] - x["8"]
colMeans(iris$Sepal.Length)
colMeans(iris, iris$Sepal.Length)
iris
head(iris)
colMeans(iris)
colMeans(iris[, 1:4])
x <- split(iris, iris$Species)
x
mean(x$virginica["Sepal.Length"])
y <- x$virginica
head(y)
mean(y$Sepal.Length)
tapply(mtcars$mpg, mtcars$cyl, mean)
26.66364 - 15.1
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
tapply(iris$Sepal.Length, iris$Species, mean)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !(is.na(r_version)))
filter(cran, !is.na(r_version))
select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version) ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10, correct_size = size - 1000)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(swirl)
swirl()
library(dplyer)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, count)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(pack_sum, desc(unique))
arrange(top_unique, desc(unique))
submit()
library(swirl)
swirl()
submit()
?spread
reset()
submit()
skip()
extract_numeric("class5")
submit()
?mutate
submit()
students4
submit()
passed
failed
passed <- mutate(passed, "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed, failed)
sat
?select
?separate
submit()
?group_by
submit()
install.packages("RMySQL")
library(RMySQL)
install.packages("RMySQL")
source("http://bioconductor.org/bioclite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rdhf5)
library(rhdf5)
InsectSprays
with(InsectSprays, tappy(count, spray, mean))
with(InsectSprays, tapply(count, spray, mean))
with(InsectSprays, by(count, spray, mean))
aggregate(count ~ spray, InsectSprays, mean)
with(InsectSprays, split(count, spray))
?text
?postscript
install.packages("twittR")
library(lattice)
x <- rnorm(100)
y <- rnorm(100)
xyplot(x,y)
xyplot(x, y)
xyplot(y ~ x| f * g)
?xyplot
library(nlme)#
library(lattice)#
xyplot(weight ~ Time | Diet, BodyWeight)
x <- xyplot(weight ~ Time | Diet, BodyWeight)
class(x)
?lines
?points
?llines
library(lattice)#
library(datasets)#
data(airquality)#
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?trellis.par.set
?print.trellis
?splom
?par
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))#
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
g <- ggplot(movies, aes(votes, rating))#
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("RFacebook")
install.packages("Rfacebook")
library(Rfacebook)
fbOAuth(794002107334373, 6106f709c4c422c84b424fd301fee640)
fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
library(ROAuth)
fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
install.packages("httpuv")
library(httpuv)
fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
FBcre <- fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
save(FBcred, file = "FBCredentials.RData")
file.create("FBCredentials.RData")
save(FBcred, file = "FBCredentials.RData")
FBcred <- fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
save(FBcred, file = "FBCredentials.RData")
load("FBcredentials.RData")
FBcred
FBData <- searchFacebook("comcast email", FBcred)
FBData <- searchFacebook("comcast email", token = FBcred)
FBData <- searchFacebook(string = "comcast email", token = FBcred)
FBcred
FBData <- searchFacebook(string = "comcast email", token = FBcred, n = 10)
library(devtools)
FBData <- searchFacebook(string = "comcast email", token = FBcred, n = 10)
update.packages("httr")
update.packages("RCurl")
library(httr)
library(RCurl)
FBData <- searchFacebook(string = "comcast email", token = FBcred, n = 10)
jake <- getUsers(users = "jacob.rozran", token = FBcred)
FBdata
FBData
jake
FBcred <- fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
FBcred <- fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
FBData <- searchFacebook(string = "comcast email", token = FBcred, n = 10)
FBData <- searchFacebook(string = "comcast email", token = FBcred, n = 10)
FBcred <- fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
FBcred <- fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
FBcred <- fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
FBcred <- fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
update.packages()
FBData <- searchFacebook(string = "comcast email", token = FBcred, n = 10)
FBData = searchFacebook(string = "comcast email", token = FBcred, n = 10)
FBData <- searchFacebook(string = URLencode("comcast email"), token = FBcred, n = 10)
load("FBcredentials.RData")
FBcred <- fbOAuth("794002107334373", "6106f709c4c422c84b424fd301fee640")
save(FBcred, file = "FBCredentials.RData")
FBData <- searchFacebook(string = URLencode("comcast email"), token = FBcred, n = 10)
FBData <- searchFacebook(string = URLencode("comcast email"), token = FBcred, n = 10)
FBData <- searchFacebook(string = "comcast email", token = FBcred, n = 10)
FBData <- searchFacebook(string = URLencode("comcast email"), token = FBcred, n = 10)
FBData <- searchFacebook(string = URLencode("comcast email"), token = FBcred, n = 10)
library(httr)
library(RCurl)
FBData <- searchFacebook(string = URLencode("comcast email"), token = FBcred, n = 10)
load("FBcredentials.RData")
FBcred
FBData <- searchFacebook(string = URLencode("comcast email"), token = FBcred, n = 10)
library(devtools)
FBData <- searchFacebook(string = URLencode("comcast email"), token = FBcred, n = 10)
